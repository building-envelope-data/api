{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/building-envelope-data/api/v1.0.0/schemas/component.json",
  "title": "component data",
  "description": "Data about components of building envelopes. It contains metadata about the components as well as keys for special data domains such as 'optical' for optical data and 'calorimetric' for calorimetric data about a certain component.",
  "$defs": {
    "component": {
      "title": "The basic definitions about a component.",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "identifier.json#/$defs/centralOrDecentral",
          "description": "This id represents the component. A component as a general product has usually a central identifier. One specific instance of this component in a specific building has usually a decentral identifier."
        },
        "name": {
          "type": "string",
          "description": "The name of the component"
        },
        "abbreviation": {
          "$ref": "string.json#/$defs/abbreviation",
          "description": "The abbreviation of the component in Latin alphabet"
        },
        "description": {
          "type": "string",
          "description": "An explanation with more details about the component"
        },
        "version": {
          "$ref": "identifier.json#/$defs/centralOrDecentral",
          "description": "The id represents the version of the component."
        },
        "relations": {
          "title": "Relations of the current component to other components. These relations can range in the dimension between a very general component such as a general product and and a very concretized component such as a specific component in a specific buildling. A second dimension of relation ranges from being part of another assembled component to being an assembly of other components. A third dimension are variants of components. They share a large part of their characteristics and are not necessarily more general, more concretized or part of an assembly.",
          "type": "object",
          "properties": {
            "concretizationOf": {
              "$ref": "identifier.json#/$defs/centralOrDecentral",
              "description": "The current component is a concretization of a more general component. The more general component is identified by this id. Whenever the current component is a 'concretizationOf' another component, the other component is a 'generalizationOf' the current component."
            },
            "generalizationOf": {
              "type": "array",
              "items": {
                "$ref": "identifier.json#/$defs/centralOrDecentral",
                "description": "The current component is a generalization of a more concretized component. The more concretized component is identified by this id. Whenever the current component is a 'generalizationOf' another component, the other component is a 'concretizationOf' the current component."
              },
              "minItems": 1
            },
            "variantOf": {
              "type": "array",
              "items": {
                "$ref": "identifier.json#/$defs/centralOrDecentral",
                "description": "The current component is neither a concretization nor a generalization nor an assembly or a part of a second component. But it is a variant of a second component. This means that the current component and the second component share a large part of their characteristics. The second component is identified by this id. Whenever the current component is a 'variantOf' another component, the other component is a 'variantOf' the current component."
              },
              "minItems": 1
            },
            "partOf": {
              "type": "array",
              "items": {
                "$ref": "identifier.json#/$defs/centralOrDecentral",
                "description": "The current component is a part of an assembly of other components. Each of the other components is defined by its id. Whenever the current component is a 'partOf' another component, the other component is 'assembledOf' the current component."
              },
              "minItems": 1
            },
            "assembledOf": {
              "type": "array",
              "items": {
                "$ref": "identifier.json#/$defs/centralOrDecentral",
                "description": "The current component is an assembly of other components. Each of the other components is defined by its id. Whenever the current component is 'assembledOf' another component, the other component is a 'partOf' the current component."
              },
              "minItems": 1
            }
          },
          "additionalProperties": false,
          "minProperties": 1,
          "required": []
        },
        "categories": {
          "$ref": "#/$defs/categories",
          "description": "The component is categorized in order to facilitate queries."
        },
        "characteristics": {
          "$ref": "#/$defs/characteristics",
          "description": "Characteristics of a component which do not depend on a specific domain such as 'optical' or 'calorimetric'. Therefore, they are constant and valid for all data sets. Characteristics which may vary between data sets about this component are stored on lower levels of the structure. For example, 'optical/globalCharacteristics' defines characteristics which are specific for optical data, but do not change within one optical data set. 'optical/dataPoints/componentCharacteristics' defines characteristics which vary between dataPoints of one optical data set. This structure aims to reduce the size of the data."
        },
        "roles": {
          "type": "object",
          "properties": {
            "owner": {
              "$ref": "stakeholder.json",
              "description": "Owner of the component"
            },
            "manufacturer": {
              "$ref": "stakeholder.json",
              "description": "Manufacturer of the component"
            },
            "developer": {
              "$ref": "stakeholder.json",
              "description": "Institution or person which developed the component"
            }
          }
        },
        "available": {
          "$ref": "common.json#/$defs/available",
          "description": "Since when and until when the component has been available"
        },
        "optical": {
          "type": "array",
          "items": {
            "$ref": "optical.json"
          },
          "minItems": 1,
          "description": "Optical data sets of one component. For example the transmittance and reflectance with specific boundary conditions."
        },
        "calorimetric": {
          "type": "array",
          "items": {
            "$ref": "calorimetric.json"
          },
          "minItems": 1,
          "description": "Calorimetric data sets of one component. For example the U value, the g value (or Solar Heat Gain Coefficient)."
        },
        "geometric": {
          "type": "array",
          "items": {
            "$ref": "geometric.json"
          },
          "minItems": 1,
          "description": "Geometric data sets of one component. For example the dimensions of the component or a CAD resource."
        },
        "photovoltaic": {
          "type": "array",
          "items": {
            "$ref": "photovoltaic.json"
          },
          "minItems": 1,
          "description": "Photovoltaic data sets. This means building envelopes which can convert irradiance into electric power."
        },
        "hygrothermal": {
          "type": "array",
          "items": {
            "$ref": "hygrothermal.json"
          },
          "minItems": 1,
          "description": "Hygrothermal data of one component. For example, the water vapour diffusion resistance factor and the moisture-dependent thermal conductivity."
        }
      },
      "additionalProperties": false,
      "minProperties": 1,
      "required": ["id"]
    },
    "categories": {
      "title": "The categories which a component can have.",
      "type": "object",
      "properties": {
        "componentType": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["material", "layer", "unit"],
            "description": "A building envelope component can have one or more of the following categories. (i) If the component is a plain material, for example a sheet which could be used to build a blind, the category 'material' should be used. (ii) If the component can be treated as a layer for optical simulations of a stack of layers, then the category 'layer' should be used. Venetian blinds are one example of a layer. The center-of-glazing values are important for the simulation of a stack of layers. (iii) If the width, the height and the edges of the component are well defined, then the category 'unit' should be used. For example a window with frame and shading system."
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "material": {
          "type": "array",
          "items": {
            "$ref": "material.json#/$defs/category"
          },
          "minItems": 1,
          "description": "If the component has the 'componentType':'material', then the material categories can defined here."
        },
        "layer": {
          "type": "array",
          "items": {
            "$ref": "layer.json#/$defs/category"
          },
          "minItems": 1,
          "description": "If the component has the 'componentType':'layer', then the layer categories can defined here."
        },
        "unit": {
          "type": "array",
          "items": {
            "$ref": "unit.json#/$defs/category"
          },
          "minItems": 1,
          "description": "If the component has the 'componentType':'unit', then the unit categories can be defined here."
        }
      },
      "additionalProperties": false,
      "minProperties": 1,
      "required": []
    },
    "version": {
      "title": "The version of a component.",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "identifier.json#/$defs/centralOrDecentral",
          "description": "This id represents a specific version of a component."
        },
        "name": {
          "type": "string",
          "description": "If the version of the component has a specific name or version number, it can be entered here."
        },
        "description": {
          "type": "string",
          "description": "Here the version can be described in free text."
        },
        "roles": {
          "type": "object",
          "properties": {
            "owner": {
              "$ref": "stakeholder.json",
              "description": "Owner of the component"
            },
            "manufacturer": {
              "$ref": "stakeholder.json",
              "description": "Manufacturer of the component"
            },
            "developer": {
              "$ref": "stakeholder.json",
              "description": "Institution or person which developed the component"
            }
          }
        },
        "available": {
          "$ref": "common.json#/$defs/available",
          "description": "Since when and until when the component has been available"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "characteristics": {
      "title": "The characteristics a component can have which do not change between different data sets about this component.",
      "type": "object",
      "properties": {
        "weight": {
          "$ref": "number.json#/$defs/kilogramWithUncertainty",
          "description": "The weight of the component in kilogram."
        },
        "airPermeability": {
          "title": "Air permeability quantifies how easy air can flow through the component.",
          "type": "object",
          "properties": {
            "permeabilityFactor": {
              "$ref": "number.json#/$defs/numberWithUncertainty",
              "description": "The Permeability Factor (PF) is defined by AERC 1.1 Appendix F."
            }
          },
          "additionalProperties": false,
          "minProperties": 1,
          "required": []
        },
        "cutOff": {
          "$ref": "number.json#/$defs/degreeWithUncertainty",
          "description": "The cutoff angle is an angle above which the incident radiation cannot cause glare."
        },
        "materialComposition": {
          "$ref": "common.json#/$defs/materialComposition",
          "description": "The chemical elements and basic materials which are part of the component."
        },
        "definitionOfSurfacesAndPrimeDirection": {
          "title": "Definition of surfaces and prime direction",
          "description": "The prime surface and the prime direction are used to define the orientation of the component. If there is a `profileAngle` symmetry, the prime direction must be equal to the direction of the profile angle symmetry.",
          "type": "object",
          "properties": {
            "reference": {
              "$ref": "common.json#/$defs/reference",
              "title": "Reference",
              "description": "Reference that defines which surface of the component is defined as non-prime and which as prime. Often, the non-prime surface faces the exterior and the prime surface faces the interior. The reference should also define a prime direction which is used to calculate the azimuth of the direction of incidence. Ideally, the manufacturer defines the surfaces and prime direction of a component in one document and refers to this document in optical data."
            },
            "description": {
              "type": "string",
              "title": "Description",
              "description": "Description of which sides of the components are defined as non-prime and which as prime and which direction is defined as the prime direction. Often, the non-prime side faces the exterior and the prime side the interior."
            }
          },
          "minProperties": 1,
          "required": []
        },
        "positionOfCoatings": {
          "title": "The positions are counted from the nonPrime surface to the prime surface of the layer or unit. Each interface between solid and gas is counted as position. `0` represents a position withouth coating and `1` represents a position with coating. For example, a double glazing with one low emissivity coating can be represented by [ 0, 0, 1, 0].",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "integer",
                "const": 0,
                "description": "`0` represents a position without coating."
              },
              {
                "type": "integer",
                "const": 1,
                "description": "`1` represents a position with coating."
              }
            ]
          }
        },
        "roughness": {
          "title": "Definition of the roughness of the prime surfaces and the non-prime surface.Both are defined by `definitionOfSurfacesAndPrimeDirection`.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "surface": {
                "$ref": "#/$defs/surface",
                "description": "Definition of the surface for which the roughness is defined in this item."
              },
              "rootMeanSquare": {
                "$ref": "number.json#/$defs/numberWithUncertainty",
                "description": "The root-mean-square roughness is calculated according to ISO 4287:2010, Section 4.2.2 as the root-mean-square of the roughness profile."
              }
            },
            "minProperties": 2,
            "required": ["surface", "rootMeanSquare"]
          },
          "minItems": 1,
          "description": "Each item of the array defines a surface of the component together with the roughness of this surface."
        },
        "material": {
          "$ref": "material.json#/$defs/characteristics",
          "description": "If the component is a material, the material-specific characteristics can be named here."
        },
        "layer": {
          "$ref": "layer.json#/$defs/characteristics",
          "description": "If the component is a layer, the layer-specific characteristics can be named here."
        },
        "unit": {
          "$ref": "unit.json#/$defs/characteristics",
          "description": "If the component is a unit, the unit-specific characteristics can be named here."
        }
      },
      "additionalProperties": false,
      "minProperties": 1,
      "required": []
    },
    "surface": {
      "type": "string",
      "enum": ["nonPrime", "prime", "symmetric"],
      "title": "Surface",
      "description": "Whether the incidence is on the non-prime or the prime surface of the sample. Both are defined in `definitionOfSurfacesAndPrimeDirection`. If the results are identical for both sides, 'symmetric' is used."
    }
  },
  "$ref": "#/$defs/component"
}
