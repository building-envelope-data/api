{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/building-envelope-data/api/v1.0.0/schemas/number.json",
  "title": "number types",
  "description": "Types for numbers with and without uncertainty and units. The number types are used to restrict the range of allowed values to a reasonable range.",
  "$defs": {
    "uncertaintyNumber": {
      "type": "number",
      "minimum": 0,
      "description": "`uncertainty` defines the uncertainty of the `uncertainValue`."
    },
    "uncertaintyInteger": {
      "type": "integer",
      "minimum": 0,
      "description": "`uncertainty` defines the uncertainty of the `uncertainValue`."
    },
    "confidenceInterval": {
      "type": "number",
      "enum": [
        68.3,
        95.4,
        99.7,
        100
      ],
      "description": "The confidence interval defines the probability that the true value lies within the uncertainty. The first three values belong to the standard errors 68.3% (one sigma), 95.4% (two sigma) or 99.7% (three sigma). If it is 100% certain that the true value cannot be beyond the uncertainty, 100% is used."
    },
    "numberWithUncertainty": {
      "title": "If a number may have an uncertainty, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "type": "number",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "type": "number"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "nonNegativeNumber": {
      "type": "number",
      "minimum": 0,
      "description": "If the number is in all cases 100% certain and when only non-negative numbers are valid, then this type is used."
    },
    "nonNegativeInteger": {
      "type": "integer",
      "minimum": 0,
      "description": "If the integer is in all cases 100% certain and when only non-negative integers are valid, then this type is used."
    },
    "nonNegativeNumberWithUncertainty": {
      "title": "If a number may have an uncertainty and only non-negative numbers are valid, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/nonNegativeNumber",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/nonNegativeNumber"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "nonNegativeIntegerWithUncertainty": {
      "title": "If a number may have an uncertainty and only non-negative integers are valid, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/nonNegativeInteger",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/nonNegativeInteger"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyInteger"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "numberBetweenZeroAndOne": {
      "description": "This type is used when only numbers between 0 and 1 are valid and no uncertainty can occur.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "numberBetweenZeroAndOneWithUncertainty": {
      "title": "If a number may have an uncertainty and only numbers between 0 and 1 are valid, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/numberBetweenZeroAndOne",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/numberBetweenZeroAndOne"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "numberBetweenZeroAndNinety": {
      "description": "This type is used when only numbers between 0 and 90 are valid and no uncertainty can occur.",
      "type": "number",
      "minimum": 0,
      "maximum": 90
    },
    "numberBetweenZeroAndOneHundred": {
      "description": "This type is used when only numbers between 0 and 100 are valid and no uncertainty can occur.",
      "type": "number",
      "minimum": 0,
      "maximum": 100
    },
    "numberBetweenZeroAndOneHundredWithUncertainty": {
      "title": "If a number may have an uncertainty and only numbers between 0 and 100 are valid, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/numberBetweenZeroAndOneHundred",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/numberBetweenZeroAndOneHundred"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "numberBetweenZeroAndOneHundredEighty": {
      "description": "This type is used when only numbers between 0 and 90 are valid and no uncertainty can occur.",
      "type": "number",
      "minimum": 0,
      "maximum": 180
    },
    "numberBetweenZeroAndThreeHundredSixty": {
      "description": "This type is used when only numbers between 0 and 90 are valid and no uncertainty can occur.",
      "type": "number",
      "minimum": 0,
      "maximum": 360
    },
    "numberBetweenMinusOneHundredEightyAndPlusOneHundredEighty": {
      "description": "This type is used when only numbers between -180 and 180 are valid and no uncertainty can occur.",
      "type": "number",
      "minimum": -180,
      "maximum": 180
    },
    "meterWithUncertainty": {
      "$ref": "#/$defs/numberWithUncertainty",
      "description": "Meter is the SI unit for length. With this type, the uncertainty can be defined."
    },
    "meter": {
      "type": "number",
      "description": "Meter is the SI unit for length. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "nanometer": {
      "type": "number",
      "minimum": 0,
      "description": "This number represents a length in nanometers. 1 nm equals 10^(-9) meters. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "squareMeterWithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "A square meter (m^2) is a unit for an area. With this type, the uncertainty can be defined."
    },
    "squareMeterPerSecond": {
      "$ref": "number",
      "description": "Square meter per second (m^2/s) is is a unit in the category of kinematic viscosity."
    },
    "squareMillimeterWithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "A square millimeter (mm^2) is a unit for an area. With this type, the uncertainty can be defined."
    },
    "squareMillimeter": {
      "$ref": "#/$defs/nonNegativeNumber",
      "description": "A square millimeter (mm^2) is a unit for an area. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "cubicMeterWithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "A cubic meter is a unit for a volume. With this type, the uncertainty can be defined."
    },
    "degree": {
      "type": "number",
      "minimum": -360.0,
      "maximum": 360.0,
      "description": "A unit to measure angles. A full rotation equals 360°. This type is used for cases in which the option of an uncertainty is not desired."
    },
    "degreeWithUncertainty": {
      "title": "If a number is in degree and may have an uncertainty, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/degree",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/degree"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "degreeBetweenZeroAndNinetyWithUncertainty": {
      "title": "If a number can have values between 0° and 90° and may have an uncertainty, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/numberBetweenZeroAndNinety",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/numberBetweenZeroAndNinety"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "degreeBetweenZeroAndOneHundredEightyWithUncertainty": {
      "title": "If a number can have values between 0° and 180° and may have an uncertainty, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/numberBetweenZeroAndOneHundredEighty",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/numberBetweenZeroAndOneHundredEighty"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "degreeBetweenZeroAndThreeHundredSixtyWithUncertainty": {
      "title": "If a number can have values between 0° and 360° and may have an uncertainty, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/numberBetweenZeroAndThreeHundredSixty",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/numberBetweenZeroAndThreeHundredSixty"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "degreeBetweenMinusOneHundredEightyAndPlusOneHundredEightyWithUncertainty": {
      "title": "If a number can have values between -180° and 180° and may have an uncertainty, then this schema is used. If the uncertainty is unknown, only one number is defined. If the uncertainty is known, the mean value is defined as `uncertainValue`, the uncertainty as `uncertainty` and the confidence interval as `confidenceInterval`.",
      "oneOf": [
        {
          "$ref": "#/$defs/numberBetweenMinusOneHundredEightyAndPlusOneHundredEighty",
          "description": "If the uncertainty is unknown, then this this option is used."
        },
        {
          "type": "object",
          "properties": {
            "uncertainValue": {
              "$ref": "#/$defs/numberBetweenMinusOneHundredEightyAndPlusOneHundredEighty"
            },
            "uncertainty": {
              "$ref": "#/$defs/uncertaintyNumber"
            },
            "confidenceInterval": {
              "$ref": "#/$defs/confidenceInterval"
            }
          },
          "additionalProperties": false,
          "required": [
            "uncertainValue",
            "uncertainty",
            "confidenceInterval"
          ]
        }
      ]
    },
    "radian": {
      "type": "number",
      "description": "A unit to measure angles. A full rotation equals 2*Pi. This type is used for cases in which the option of an uncertainty is not desired."
    },
    "wattWithUncertainty": {
      "$ref": "#/$defs/numberWithUncertainty",
      "description": "Watt (W) is the SI unit for power. With this type, the uncertainty can be defined."
    },
    "watt": {
      "type": "number",
      "description": "Watt (W) is the SI unit for power. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "kelvinWithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "Kelvin (K) is the SI unit for temperature. With this type, the uncertainty can be defined."
    },
    "kelvin": {
      "type": "number",
      "description": "Kelvin (K) is the SI unit for temperature. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "degreeCelcius": {
      "type": "number",
      "minimum": -273.15,
      "description": "degree Celcius (°C) is the unit of temperature on the Celsius temperature scale."
    },
    "voltWithUncertainty": {
      "$ref": "#/$defs/numberWithUncertainty",
      "description": "Volt (V) is the SI unit for electric potential. With this type, the uncertainty can be defined."
    },
    "volt": {
      "type": "number",
      "description": "Volt (V) is the SI unit for electric potential. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "ampereWithUncertainty": {
      "$ref": "#/$defs/numberWithUncertainty",
      "description": "Ampere (A) is the SI unit for electric current. With this type, the uncertainty can be defined."
    },
    "ampere": {
      "type": "number",
      "description": "Ampere (A) is the SI unit for electric current. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "ohmWithUncertainty": {
      "$ref": "#/$defs/numberWithUncertainty",
      "description": "Ohm is the derived SI unit for electric resistance. With this type, the uncertainty can be defined."
    },
    "ohm": {
      "type": "number",
      "description": "Ohm is the derived SI unit for electric resistance. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "ohmPerMeterWithUncertainty": {
      "$ref": "#/$defs/numberWithUncertainty",
      "description": "Ohm per meter is a unit for the electric resistance depending on the length. With this type, the uncertainty can be defined."
    },
    "ohmPerMeter": {
      "type": "number",
      "description": "Ohm per meter is a unit for the electric resistance depending on the length. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "kilogramWithUncertainty": {
      "$ref": "#/$defs/numberWithUncertainty",
      "description": "Kilogram (also kilogramme, kg) is the SI unit for mass. With this type, the uncertainty can be defined."
    },
    "pascal": {
      "type": "number",
      "description": "Pascal (Pa) is the SI unit for pressure. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "hertzWithUncertainty": {
      "$ref": "#/$defs/numberWithUncertainty",
      "description": "Hertz (Hz) is a derived SI unit of frequency. With this type, the uncertainty can be defined."
    },
    "hertz": {
      "type": "number",
      "description": "Hertz (Hz) is a derived SI unit of frequency. This type is used for rare cases in which the option of an uncertainty is not desired."
    },
    "kilogramPerCubicMeter": {
      "$ref": "#/$defs/nonNegativeNumber",
      "description": "The density of a material has the SI units kg/m^3."
    },
    "kilogramPerCubicMeterWithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "The density of a material has the SI units kg/m^3. With this type, the uncertainty can be defined."
    },
    "kilogramPerSquareMeterAndSquareRootSeconds": {
      "$ref": "#/$defs/nonNegativeNumber",
      "description": "Kilogramm per square meter and per square root seconds (kg/(m^2*s^0.5)) are the SI uniut for the water absorption coefficient"
    },
    "joulePerKg": {
      "$ref": "#/$defs/nonNegativeNumber",
      "description": "Joule per kilogram (J/kg) are the SI units of the enthalpy."
    },
    "joulePerKgK": {
      "$ref": "#/$defs/nonNegativeNumber",
      "description": "Joule per kilogram and per Kelvin (J/(kg*K)) are the SI units of the specific heat capacity."
    },
    "joulePerKgKwithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "Joule per kilogram and per Kelvin (J/(kg*K)) are the SI units of the specific heat capacity. With this type, the uncertainty can be defined."
    },
    "kilogramPerSecondWithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "Kilogram per second (kg/s) are the SI units of the mass flow. With this type, the uncertainty can be defined."
    },
    "wattPerSquareMeterKelvinWithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "Watt per square meter and per kelvin (W/(m^2*K) are the SI units of a heat transfer coefficient. With this type, the uncertainty can be defined."
    },
    "wattPerMeterKelvin": {
      "$ref": "#/$defs/nonNegativeNumber",
      "description": "Watt per meter and per kelvin (W/(m*K)) are the SI units of the thermal conductivity."
    },
    "wattPerMeterSquareKelvin": {
      "$ref": "#/$defs/nonNegativeNumber",
      "description": "Watt per meter and per kelvin (W/(m*K²)) are the SI units of the thermal conductivity supplement per kelvin."
    },
    "wattPerMeterKelvinWithUncertainty": {
      "$ref": "#/$defs/nonNegativeNumberWithUncertainty",
      "description": "Watt per meter and per kelvin (W/(m*K)) are the SI units of the thermal conductivity. With this type, the uncertainty can be defined."
    },
    "percentPerKelvin": {
      "description": "Percent per Kelvin (%/K), for example used for temperature coefficients without uncertainty.",
      "type": "number",
      "minimum": -100,
      "maximum": 100
    },
    "percentPerMassPercent": {
      "description": "Percent per mass percent (%/M-%), for example used for moisture dependent conductivity supplement without uncertainty.",
      "type": "number",
      "minimum": 0,
      "maximum": 10
    },
    "percent": {
      "description": "Percent, for example, the number 5 of this type means 5 %.",
      "type": "number"
    },
    "percentBetweenZeroAndOneHundred": {
      "$ref": "#/$defs/numberBetweenZeroAndOneHundred",
      "description": "Percent without uncertainty. For example, the number 5 of this type means 5 %."
    },
    "percentBetweenZeroAndOneHundredWithUncertainty": {
      "$ref": "#/$defs/numberBetweenZeroAndOneHundredWithUncertainty",
      "description": "Percent. For example, the number 5 of this type means 5 %. With this type, the uncertainty can be defined."
    },
    "percentDecimal": {
      "description": "Equivalent decimal value to percent, for example, the number 0.05 of this type means 5 %.",
      "type": "number"
    },
    "percentDecimalBetweenZeroAndOne": {
      "description": "Equivalent decimal value to percent, for example, the number 0.05 of this type means 5 %.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "latitude": {
      "$ref": "#/$defs/degreeBetweenZeroAndNinetyWithUncertainty",
      "description": "The angle between the equatorial plane and the straight line between the location and the center of the earth. North is positive. For example, Berlin has a latitude of 52.52 ."
    },
    "longitude": {
      "$ref": "#/$defs/degreeBetweenMinusOneHundredEightyAndPlusOneHundredEightyWithUncertainty",
      "description": "The angle between the Greenwich meridian and the straight line between the location and the center of the earth. West is positive. For example, Berlin has a longitude of 13.405 ."
    },
    "elevation": {
      "$ref": "number.json#/$defs/meter",
      "description": "The elevation above sea level. It has the SI unit meter."
    }
  }
}